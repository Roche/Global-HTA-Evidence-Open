# Fractional polynomial NMA, 2nd order, fixed effect model
# --------------------------------------------------------------------------------
# Data: grouped survival data, binomial likelihood, linear predictor on log-hazard
#         Nobs     number of observations
#         n[i]     patients at risk in interval i
#         r[i]     events during interval i
#         time[i]  mid-point of interval i
#         dt[i]    length of interval i
#         Ns       number of studies
#         Na[j]    number of arms in study j
#         Ntrt     number of treatments
#         s[i]     study number for obs i
#         a[i]     arm number (within study) for obs i
#         t[i,j]   treatment in study i arm j
#         P1, P2   exponents of the time varying terms in the fractional polynomial
#         mean[1:2]         prior mean (for contrasts d and baselines mu)
#         prec2[1:2, 1:2]   prior precision (for d and mu)
# --------------------------------------------------------------------------------

model{

## Sampling model
for (i in 1:Nobs){
  time1[i] <- (equals(P1,0) * log(time[i]) + (1-equals(P1,0)) * pow(time[i],P1)   ) 
  time2[i] <- (  (1-equals(P2,P1)) * (   equals(P2,0) * log(time[i]) + (1-equals(P2,0)) * pow(time[i],P2)  ) + 
                  equals(P2,P1) * (   equals(P2,0) * log(time[i])*log(time[i])   +   (1-equals(P2,0)) * pow(time[i],P2) * log(time[i]) ) )
  }

for (i in 1:Nobs){
  # likelihood: digitized KM curves, grouped into intervals [t, t+dt]
  r[i] ~ dbin(p[i], n[i])
  p[i] <- 1 - exp(-h[i] * dt[i])  # cumulative hazard over interval [t,t+dt] expressed as deaths per person-month

  # fractional polynomial
  log(h[i]) <- Beta[s[i], a[i], 1] + Beta[s[i], a[i], 2] * time1[i] + Beta[s[i], a[i], 3] * time2[i]
  }


## Arm level parameters = study effect + trt effect (consistency eq)
for (l in 1:Ns){
  for (ll in 1:Na[l]){
    Beta[l, ll, 1] <- mu[l, 1] + d[t[l, ll], 1] - d[t[l, 1], 1]
    Beta[l, ll, 2] <- mu[l, 2] + d[t[l, ll], 2] - d[t[l, 1], 2]
    Beta[l, ll, 3] <- mu[l, 3] + d[t[l, ll], 3] - d[t[l, 1], 3]
    }
  }
     
## Priors
for (j in 1:Ns){
  mu[j, 1:3] ~ dmnorm(feprior_mean[1:3], feprior_prec[,]) 
  }

d[1, 1] <- 0
d[1, 2] <- 0
d[1, 3] <- 0
for (k in 2:Ntrt){
  d[k, 1:3] ~ dmnorm(feprior_mean[1:3], feprior_prec[,]) 
  }


} # end of model
